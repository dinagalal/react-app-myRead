{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinag\\\\projects\\\\react-app-myRead\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport ListBooks from \"./ListBooks\";\nimport SearchComponent from \"./SearchComponent\";\nimport * as BooksAPI from './BooksAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookShelves = [{\n  key: \"currentlyReading\",\n  name: \"Currently reading\"\n}, {\n  key: \"wantToRead\",\n  name: \"Want to Read\"\n}, {\n  key: \"read\",\n  name: \"Read\"\n}];\n\nconst App = () => {\n  _s();\n\n  const [searchQuery, setSearchQuery] = useState([]);\n  const [allBooks, setAllBooks] = useState([]); //Get all Data from API (show all books)\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const res = await BooksAPI.getAll();\n      setAllBooks(res);\n    };\n\n    getBooks();\n  }, []); // update the book and where to  \n\n  const updateTheShelf = (book, toShelf) => {\n    BooksAPI.update(book, toShelf).then(data => console.log(data));\n\n    const updatedBooks = () => {\n      if (toShelf !== \"none\") {\n        book.shelf = toShelf;\n        console.groupCollapsed(book.shelf);\n        allBooks.filter(b => b.id === book.id).concat(book);\n      }\n    };\n\n    setAllBooks(updatedBooks);\n  };\n\n  const searchForBooks = query => {\n    if (query.length > 0) {\n      BooksAPI.search(query).then(data => {\n        if (data.error) {\n          setSearchQuery([]);\n        } else {\n          setSearchQuery(data);\n        }\n      });\n    } else {\n      setSearchQuery([]);\n    }\n  };\n\n  const resetSearch = () => {\n    setSearchQuery([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(ListBooks, {\n        bookshelves: BookShelves,\n        allBooks: allBooks,\n        moveTo: updateTheShelf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/search\",\n      element: /*#__PURE__*/_jsxDEV(SearchComponent, {\n        onSearch: searchForBooks,\n        moveTo: updateTheShelf,\n        allBooks: allBooks,\n        query: searchQuery,\n        onResetSearch: resetSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"/5D6LC11cY7mTy7JDT137MnyML4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/dinag/projects/react-app-myRead/starter/src/App.js"],"names":["useState","useEffect","Routes","Route","ListBooks","SearchComponent","BooksAPI","BookShelves","key","name","App","searchQuery","setSearchQuery","allBooks","setAllBooks","getBooks","res","getAll","updateTheShelf","book","toShelf","update","then","data","console","log","updatedBooks","shelf","groupCollapsed","filter","b","id","concat","searchForBooks","query","length","search","error","resetSearch"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Routes,Route} from \"react-router-dom\";\r\nimport ListBooks from \"./ListBooks\";\r\nimport SearchComponent from \"./SearchComponent\";\r\nimport * as BooksAPI from './BooksAPI';\r\n\r\n\r\nconst BookShelves = [\r\n  {key:\"currentlyReading\", name:\"Currently reading\"},\r\n  {key:\"wantToRead\", name:\"Want to Read\"},\r\n  {key:\"read\", name:\"Read\"}\r\n]\r\n\r\n\r\nconst App = () =>{\r\n  const [searchQuery, setSearchQuery] = useState([]);\r\n  const [allBooks, setAllBooks] = useState([]);\r\n\r\n  \r\n//Get all Data from API (show all books)\r\n  useEffect(() => {\r\n    const getBooks = async () => {\r\n      const res = await BooksAPI.getAll();\r\n      setAllBooks(res);\r\n      \r\n    \r\n    };\r\n    \r\n    getBooks();\r\n   \r\n  }, []);\r\n\r\n// update the book and where to  \r\n\r\nconst updateTheShelf = (book,toShelf) =>{\r\n  BooksAPI.update(book,toShelf).then(data => console.log(data));\r\n\r\nconst updatedBooks = ()=>{\r\n  if(toShelf !== \"none\"){\r\n    book.shelf = toShelf;\r\n    console.groupCollapsed(book.shelf)\r\n    allBooks.filter(b=> b.id === book.id).concat(book);\r\n  }\r\n}\r\n\r\n  \r\n   setAllBooks(updatedBooks);\r\n \r\n  \r\n     \r\n}\r\n\r\n\r\n\r\nconst searchForBooks = (query=> {\r\n   if(query.length > 0){\r\n    BooksAPI.search(query).then(data=> {\r\n      if(data.error){\r\n        setSearchQuery([]);\r\n      }\r\n      else{\r\n        setSearchQuery(data)\r\n      }\r\n\r\n   })\r\n  }\r\n  else{\r\n    setSearchQuery([]);\r\n  }\r\n});\r\nconst resetSearch = ()=>{\r\n  setSearchQuery([]);\r\n}\r\n\r\n\r\n\r\n  return (\r\n   \r\n      <Routes>\r\n             \r\n            <Route exact path=\"/\" element = {<ListBooks bookshelves={BookShelves} allBooks={allBooks} moveTo={updateTheShelf}/>} />\r\n            <Route exact path=\"/search\" element={<SearchComponent onSearch={searchForBooks} moveTo={updateTheShelf} allBooks={allBooks}\r\n            query={searchQuery} onResetSearch={resetSearch}\r\n            />}/>\r\n       \r\n      </Routes>\r\n      \r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}