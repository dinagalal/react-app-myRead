{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinag\\\\projects\\\\react-app-myRead\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport ListBooks from \"./ListBooks\";\nimport SearchComponent from \"./SearchComponent\";\nimport * as BooksAPI from './BooksAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookShelves = [{\n  key: \"currentlyReading\",\n  name: \"Currently reading\"\n}, {\n  key: \"wantToRead\",\n  name: \"Want to Read\"\n}, {\n  key: \"read\",\n  name: \"Read\"\n}];\n\nconst App = () => {\n  _s();\n\n  const [searchQuery, setSearchQuery] = useState([]);\n  const [allBooks, setAllBooks] = useState([]); //Get all Data from API (show all books)\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const res = await BooksAPI.getAll();\n      setAllBooks(res);\n    };\n\n    getBooks();\n  }, []); // update the book and where to  \n\n  const updateTheShelf = (book, toShelf) => {\n    const updatedBooks = allBooks.map(bok => {\n      if (bok.id === book.id) {\n        bok.shelf = toShelf;\n        return book;\n      }\n\n      return bok;\n    });\n    setAllBooks(updatedBooks);\n    BooksAPI.update(book, toShelf).then(data => console.log(data));\n  };\n\n  useEffect(() => {\n    BooksAPI.search(searchQuery).then(data => {\n      if (searchQuery.l) if (data.error) {\n        setSearchQuery([]);\n      } else {\n        setSearchQuery(data);\n      }\n    });\n  }, [searchQuery]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(ListBooks, {\n        bookshelves: BookShelves,\n        allBooks: allBooks,\n        moveTo: updateTheShelf\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/search\",\n      element: /*#__PURE__*/_jsxDEV(SearchComponent, {\n        query: setSearchQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"iP9+z3skvGHR+vyOGUeQ4iXDPHg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/dinag/projects/react-app-myRead/starter/src/App.js"],"names":["useState","useEffect","Routes","Route","ListBooks","SearchComponent","BooksAPI","BookShelves","key","name","App","searchQuery","setSearchQuery","allBooks","setAllBooks","getBooks","res","getAll","updateTheShelf","book","toShelf","updatedBooks","map","bok","id","shelf","update","then","data","console","log","search","l","error"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,EAAgBC,KAAhB,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;;AAEA,MAAMC,WAAW,GAAG,CAClB;AAACC,EAAAA,GAAG,EAAC,kBAAL;AAAyBC,EAAAA,IAAI,EAAC;AAA9B,CADkB,EAElB;AAACD,EAAAA,GAAG,EAAC,YAAL;AAAmBC,EAAAA,IAAI,EAAC;AAAxB,CAFkB,EAGlB;AAACD,EAAAA,GAAG,EAAC,MAAL;AAAaC,EAAAA,IAAI,EAAC;AAAlB,CAHkB,CAApB;;AAOA,MAAMC,GAAG,GAAG,MAAK;AAAA;;AACf,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CAFe,CAIjB;;AACEC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,QAAQ,GAAG,YAAY;AAC3B,YAAMC,GAAG,GAAG,MAAMV,QAAQ,CAACW,MAAT,EAAlB;AACAH,MAAAA,WAAW,CAACE,GAAD,CAAX;AAGD,KALD;;AAOAD,IAAAA,QAAQ;AAET,GAVQ,EAUN,EAVM,CAAT,CALe,CAiBjB;;AAEA,QAAMG,cAAc,GAAG,CAACC,IAAD,EAAMC,OAAN,KAAiB;AACtC,UAAMC,YAAY,GAAGR,QAAQ,CAACS,GAAT,CAAcC,GAAD,IAAO;AACvC,UAAGA,GAAG,CAACC,EAAJ,KAAWL,IAAI,CAACK,EAAnB,EAAsB;AACpBD,QAAAA,GAAG,CAACE,KAAJ,GAAYL,OAAZ;AACA,eAAOD,IAAP;AACD;;AACF,aAAOI,GAAP;AACA,KANoB,CAArB;AAQAT,IAAAA,WAAW,CAACO,YAAD,CAAX;AACAf,IAAAA,QAAQ,CAACoB,MAAT,CAAgBP,IAAhB,EAAqBC,OAArB,EAA8BO,IAA9B,CAAmCC,IAAI,IAAIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAA3C;AAED,GAZD;;AAcA3B,EAAAA,SAAS,CAAC,MAAM;AACfK,IAAAA,QAAQ,CAACyB,MAAT,CAAgBpB,WAAhB,EAA6BgB,IAA7B,CAAkCC,IAAI,IAAG;AACvC,UAAGjB,WAAW,CAACqB,CAAf,EACC,IAAGJ,IAAI,CAACK,KAAR,EAAc;AACZrB,QAAAA,cAAc,CAAC,EAAD,CAAd;AACD,OAFD,MAGI;AACFA,QAAAA,cAAc,CAACgB,IAAD,CAAd;AACD;AAEH,KATD;AAWA,GAZQ,EAYN,CAACjB,WAAD,CAZM,CAAT;AAcE,sBAEI,QAAC,MAAD;AAAA,4BAEM,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,OAAO,eAAI,QAAC,SAAD;AAAW,QAAA,WAAW,EAAEJ,WAAxB;AAAqC,QAAA,QAAQ,EAAEM,QAA/C;AAAyD,QAAA,MAAM,EAAEK;AAAjE;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,YAFN,eAGM,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,SAAlB;AAA4B,MAAA,OAAO,eAAE,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAEN;AAAxB;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,YAHN;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAWD,CA1DD;;GAAMF,G;;KAAAA,G;AA4DN,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Routes,Route} from \"react-router-dom\";\r\nimport ListBooks from \"./ListBooks\";\r\nimport SearchComponent from \"./SearchComponent\";\r\nimport * as BooksAPI from './BooksAPI';\r\n\r\nconst BookShelves = [\r\n  {key:\"currentlyReading\", name:\"Currently reading\"},\r\n  {key:\"wantToRead\", name:\"Want to Read\"},\r\n  {key:\"read\", name:\"Read\"}\r\n]\r\n\r\n\r\nconst App = () =>{\r\n  const [searchQuery, setSearchQuery] = useState([]);\r\n  const [allBooks, setAllBooks] = useState([]);\r\n  \r\n//Get all Data from API (show all books)\r\n  useEffect(() => {\r\n    const getBooks = async () => {\r\n      const res = await BooksAPI.getAll();\r\n      setAllBooks(res);\r\n      \r\n    \r\n    };\r\n\r\n    getBooks();\r\n   \r\n  }, []);\r\n\r\n// update the book and where to  \r\n\r\nconst updateTheShelf = (book,toShelf) =>{\r\n  const updatedBooks = allBooks.map((bok)=>{\r\n    if(bok.id === book.id){\r\n      bok.shelf = toShelf\r\n      return book\r\n    }\r\n   return bok\r\n  }\r\n  )\r\n  setAllBooks(updatedBooks);\r\n  BooksAPI.update(book,toShelf).then(data => console.log(data));\r\n     \r\n}\r\n\r\nuseEffect(() => {\r\n BooksAPI.search(searchQuery).then(data=> {\r\n   if(searchQuery.l)\r\n    if(data.error){\r\n      setSearchQuery([]);\r\n    }\r\n    else{\r\n      setSearchQuery(data)\r\n    }\r\n\r\n })\r\n \r\n}, [searchQuery]);\r\n\r\n  return (\r\n   \r\n      <Routes>\r\n             \r\n            <Route exact path=\"/\" element = {<ListBooks bookshelves={BookShelves} allBooks={allBooks} moveTo={updateTheShelf}/>} />\r\n            <Route exact path=\"/search\" element={<SearchComponent query={setSearchQuery}/>}/>\r\n       \r\n      </Routes>\r\n      \r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}